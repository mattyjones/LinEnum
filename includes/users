#!/bin/bash

user_info() {
  echo -e "\e[$orange###################### User/Group ##########################[$default" # TODO fix spacing

  #current user details
  currusr=$(id 2>/dev/null)
  if [ "$currusr" ]; then
    echo -e "\e[$cyan[-] Current user/group:\e[$default"
    echo -e "$currusr\n"
  fi

  #last logged on user information
  lastlogedonusrs=$(lastlog 2>/dev/null | grep -v "Never" 2>/dev/null)
  if [ "$lastlogedonusrs" ]; then
    echo -e "\e[$cyan[-] Users that have previously logged onto the system:\e[$default"
    echo -e "$lastlogedonusrs\n"
  fi

  #who else is logged on
  loggedonusrs=$(w 2>/dev/null)
  if [ "$loggedonusrs" ]; then
    echo -e "\e[$cyan[-] Who else is logged on:\e[$default"
    echo -e "$loggedonusrs\n"
  fi

  #lists all id's and respective group(s)
  grpinfo=$(for i in $(cut -d":" -f1 /etc/passwd 2>/dev/null); do echo -e "$i : $(id | awk -F"groups=" '{ print $2 }' | column -t)"; done 2>/dev/null)
  if [ "$grpinfo" ]; then
    echo -e "\e[$cyan[-] Group memberships:\e[$default"
    echo -e "$grpinfo\n"
  fi

  #added by phackt - look for adm group (thanks patrick)
  adm_users=$(echo -e "$grpinfo" | grep "(adm)")
  if [[ ! -z $adm_users ]]; then
    echo -e "\e[$cyan[-] It looks like we have some admin users:\e[$default\n$adm_users"
    echo -e "\n"
  fi

  #checks to see if any hashes are stored in /etc/passwd (depreciated  *nix storage method)
  hashesinpasswd=$(grep -v '^[^:]*:[x]' /etc/passwd 2>/dev/null)
  if [ "$hashesinpasswd" ]; then
    echo -e "\e[$orange[+] It looks like we have password hashes in /etc/passwd!\e[$default\n$hashesinpasswd"
    echo -e "\n"
  fi

  #contents of /etc/passwd
  readpasswd=$(cat /etc/passwd 2>/dev/null)
  if [ "$readpasswd" ]; then
    echo -e "\e[$cyan[-] Contents of /etc/passwd:\e[$default\n$readpasswd"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$readpasswd" ]; then
    mkdir $format/etc-export/ 2>/dev/null
    cp /etc/passwd $format/etc-export/passwd 2>/dev/null
  fi

  #checks to see if the shadow file can be read
  readshadow=$(cat /etc/shadow 2>/dev/null)
  if [ "$readshadow" ]; then
    echo -e "\e[$orange[+] We can read the shadow file!\e[$default\n$readshadow"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$readshadow" ]; then
    mkdir $format/etc-export/ 2>/dev/null
    cp /etc/shadow $format/etc-export/shadow 2>/dev/null
  fi

  #checks to see if /etc/master.passwd can be read - BSD 'shadow' variant
  readmasterpasswd=$(cat /etc/master.passwd 2>/dev/null)
  if [ "$readmasterpasswd" ]; then
    echo -e "\e[$orange[+] We can read the master.passwd file!\e[$default\n$readmasterpasswd"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$readmasterpasswd" ]; then
    mkdir $format/etc-export/ 2>/dev/null
    cp /etc/master.passwd $format/etc-export/master.passwd 2>/dev/null
  fi

  #all root accounts (uid 0)
  superman=$(grep -v -E "^#" /etc/passwd 2>/dev/null | awk -F: '$3 == 0 { print $1}' 2>/dev/null)
  if [ "$superman" ]; then
    echo -e "\e[$cyan[-] Super user account(s):\e[$default\n$superman"
    echo -e "\n"
  fi

  #pull out vital sudoers info
  sudoers=$(grep -v -e '^$' /etc/sudoers 2>/dev/null | grep -v "#" 2>/dev/null)
  if [ "$sudoers" ]; then
    echo -e "\e[$cyan[-] Sudoers configuration (condensed):\e[$default$sudoers"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$sudoers" ]; then
    mkdir $format/etc-export/ 2>/dev/null
    cp /etc/sudoers $format/etc-export/sudoers 2>/dev/null
  fi

  #can we sudo without supplying a password
  sudoperms=$(echo '' | sudo -S -l -k 2>/dev/null)
  if [ "$sudoperms" ]; then
    echo -e "\e[$orange[+] We can sudo without supplying a password!\e[$default\n$sudoperms"
    echo -e "\n"
  fi

  #check sudo perms - authenticated
  if [ "$sudopass" ]; then
    if [ "$sudoperms" ]; then
      :
    else
      sudoauth=$(echo $user_password | sudo -S -l -k 2>/dev/null)
      if [ "$sudoauth" ]; then
        echo -e "\e[$orange[+] We can sudo when supplying a password!\e[$default\n$sudoauth"
        echo -e "\n"
      fi
    fi
  fi

  ##known 'good' breakout binaries (cleaned to parse /etc/sudoers for comma separated values) - authenticated
  if [ "$sudopass" ]; then
    if [ "$sudoperms" ]; then
      :
    else
      sudopermscheck=$(echo $user_password | sudo -S -l -k 2>/dev/null | xargs -n 1 2>/dev/null | sed 's/,*$//g' 2>/dev/null | grep -w $binarylist 2>/dev/null)
      if [ "$sudopermscheck" ]; then
        echo -e "\e[$orange[-] Possible sudo pwnage!\e[$default\n$sudopermscheck"
        echo -e "\n"
      fi
    fi
  fi

  #known 'good' breakout binaries (cleaned to parse /etc/sudoers for comma separated values)
  sudopwnage=$(echo '' | sudo -S -l -k 2>/dev/null | xargs -n 1 2>/dev/null | sed 's/,*$//g' 2>/dev/null | grep -w $binarylist 2>/dev/null)
  if [ "$sudopwnage" ]; then
    echo -e "\e[$orange[+] Possible sudo pwnage!\e[$default\n$sudopwnage"
    echo -e "\n"
  fi

  #who has sudoed in the past
  whohasbeensudo=$(find /home -name .sudo_as_admin_successful 2>/dev/null)
  if [ "$whohasbeensudo" ]; then
    echo -e "\e[$cyan[-] Accounts that have recently used sudo:\e[$default\n$whohasbeensudo"
    echo -e "\n"
  fi

  #checks to see if roots home directory is accessible
  rthmdir=$(ls -ahl /root/ 2>/dev/null)
  if [ "$rthmdir" ]; then
    echo -e "\e[$orange[+] We can read root's home directory!\e[$default\n$rthmdir"
    echo -e "\n"
  fi

  #displays /home directory permissions - check if any are lax
  homedirperms=$(ls -ahl /home/ 2>/dev/null)
  if [ "$homedirperms" ]; then
    echo -e "\e[$cyan[-] Are permissions on /home directories lax:\e[$default\n$homedirperms"
    echo -e "\n"
  fi

  #looks for files we can write to that don't belong to us
  if [ "$thorough" = "1" ]; then
    grfilesall=$(find / -writable ! -user $(whoami) -type f ! -path "/proc/*" ! -path "/sys/*" -exec ls -al {} \; 2>/dev/null)
    if [ "$grfilesall" ]; then
      echo -e "\e[$cyan[-] Files not owned by user but writable by group:\e[$default\n$grfilesall"
      echo -e "\n"
    fi
  fi

  #looks for files that belong to us
  if [ "$thorough" = "1" ]; then
    ourfilesall=$(find / -user $(whoami) -type f ! -path "/proc/*" ! -path "/sys/*" -exec ls -al {} \; 2>/dev/null)
    if [ "$ourfilesall" ]; then
      echo -e "\e[$cyan[-] Files owned by our user:\e[$default\n$ourfilesall"
      echo -e "\n"
    fi
  fi

  #looks for hidden files
  if [ "$thorough" = "1" ]; then
    hiddenfiles=$(find / -name ".*" -type f ! -path "/proc/*" ! -path "/sys/*" -exec ls -al {} \; 2>/dev/null)
    if [ "$hiddenfiles" ]; then
      echo -e "\e[$cyan[-] Hidden files:\e[$default\n$hiddenfiles"
      echo -e "\n"
    fi
  fi

  #looks for world-reabable files within /home - depending on number of /home dirs & files, this can take some time so is only 'activated' with thorough scanning switch
  if [ "$thorough" = "1" ]; then
    wrfileshm=$(find /home/ -perm -4 -type f -exec ls -al {} \; 2>/dev/null)
    if [ "$wrfileshm" ]; then
      echo -e "\e[$cyan[-] World-readable files within /home:\e[$default\n$wrfileshm"
      echo -e "\n"
    fi
  fi

  if [ "$thorough" = "1" ]; then
    if [ "$export" ] && [ "$wrfileshm" ]; then
      mkdir $format/wr-files/ 2>/dev/null
      for i in $wrfileshm; do cp --parents $i $format/wr-files/; done 2>/dev/null
    fi
  fi

  #lists current user's home directory contents
  if [ "$thorough" = "1" ]; then
    homedircontents=$(ls -ahl ~ 2>/dev/null)
    if [ "$homedircontents" ]; then
      echo -e "\e[$cyan[-] Home directory contents:\e[$default\n$homedircontents"
      echo -e "\n"
    fi
  fi

  #checks for if various ssh files are accessible - this can take some time so is only 'activated' with thorough scanning switch
  if [ "$thorough" = "1" ]; then
    sshfiles=$(find / \( -name "id_dsa*" -o -name "id_rsa*" -o -name "known_hosts" -o -name "authorized_hosts" -o -name "authorized_keys" \) -exec ls -la {} \; 2>/dev/null)
    if [ "$sshfiles" ]; then
      echo -e "\e[$cyan[-] SSH keys/host information found in the following locations:\e[$default\n$sshfiles"
      echo -e "\n"
    fi
  fi

  if [ "$thorough" = "1" ]; then
    if [ "$export" ] && [ "$sshfiles" ]; then
      mkdir $format/ssh-files/ 2>/dev/null
      for i in $sshfiles; do cp --parents $i $format/ssh-files/; done 2>/dev/null
    fi
  fi

  #is root permitted to login via ssh
  sshrootlogin=$(grep "PermitRootLogin " /etc/ssh/sshd_config 2>/dev/null | grep -v "#" | awk '{print  $2}')
  if [ "$sshrootlogin" = "yes" ]; then
    echo -e "\e[$cyan[-] Root is allowed to login via SSH:\e[$default"
    grep "PermitRootLogin " /etc/ssh/sshd_config 2>/dev/null | grep -v "#"
    echo -e "\n"
  fi
}
