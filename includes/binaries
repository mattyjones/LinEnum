#!/bin/bash

interesting_files() {
  echo -e "\e[00;33m### INTERESTING FILES ####################################\e[00m"

  #checks to see if various files are installed
  echo -e "\e[00;31m[-] Useful file locations:\e[00m"
  which nc 2>/dev/null
  which netcat 2>/dev/null
  which wget 2>/dev/null
  which nmap 2>/dev/null
  which gcc 2>/dev/null
  which curl 2>/dev/null
  which tshark 2>/dev/null
  which tcpdump 2>/dev/null
  which wireshark 2>/dev/null
  echo -e "\n"

  #limited search for installed compilers
  compiler=$(dpkg --list 2>/dev/null | grep compiler | grep -v decompiler 2>/dev/null && yum list installed 'gcc*' 2>/dev/null | grep gcc 2>/dev/null)
  if [ "$compiler" ]; then
    echo -e "\e[00;31m[-] Installed compilers:\e[00m\n$compiler"
    echo -e "\n"
  fi

  #manual check - lists out sensitive files, can we read/modify etc.
  echo -e "\e[00;31m[-] Can we read/write sensitive files:\e[00m"
  ls -la /etc/passwd 2>/dev/null
  ls -la /etc/group 2>/dev/null
  ls -la /etc/profile 2>/dev/null
  ls -la /etc/shadow 2>/dev/null
  ls -la /etc/master.passwd 2>/dev/null
  echo -e "\n"

  #search for suid files
  allsuid=$(find / -perm -4000 -type f 2>/dev/null)
  findsuid=$(find $allsuid -perm -4000 -type f -exec ls -la {} \; 2>/dev/null)
  if [ "$findsuid" ]; then
    echo -e "\e[00;31m[-] SUID files:\e[00m\n$findsuid"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$findsuid" ]; then
    mkdir $format/suid-files/ 2>/dev/null
    for i in $findsuid; do cp $i $format/suid-files/; done 2>/dev/null
  fi

  #list of 'interesting' suid files - feel free to make additions
  intsuid=$(find $allsuid -perm -4000 -type f -exec ls -la {} \; 2>/dev/null | grep -w $binarylist 2>/dev/null)
  if [ "$intsuid" ]; then
    echo -e "\e[00;33m[+] Possibly interesting SUID files:\e[00m\n$intsuid"
    echo -e "\n"
  fi

  #lists world-writable suid files
  wwsuid=$(find $allsuid -perm -4002 -type f -exec ls -la {} \; 2>/dev/null)
  if [ "$wwsuid" ]; then
    echo -e "\e[00;33m[+] World-writable SUID files:\e[00m\n$wwsuid"
    echo -e "\n"
  fi

  #lists world-writable suid files owned by root
  wwsuidrt=$(find $allsuid -uid 0 -perm -4002 -type f -exec ls -la {} \; 2>/dev/null)
  if [ "$wwsuidrt" ]; then
    echo -e "\e[00;33m[+] World-writable SUID files owned by root:\e[00m\n$wwsuidrt"
    echo -e "\n"
  fi

  #search for sgid files
  allsgid=$(find / -perm -2000 -type f 2>/dev/null)
  findsgid=$(find $allsgid -perm -2000 -type f -exec ls -la {} \; 2>/dev/null)
  if [ "$findsgid" ]; then
    echo -e "\e[00;31m[-] SGID files:\e[00m\n$findsgid"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$findsgid" ]; then
    mkdir $format/sgid-files/ 2>/dev/null
    for i in $findsgid; do cp $i $format/sgid-files/; done 2>/dev/null
  fi

  #list of 'interesting' sgid files
  intsgid=$(find $allsgid -perm -2000 -type f -exec ls -la {} \; 2>/dev/null | grep -w $binarylist 2>/dev/null)
  if [ "$intsgid" ]; then
    echo -e "\e[00;33m[+] Possibly interesting SGID files:\e[00m\n$intsgid"
    echo -e "\n"
  fi

  #lists world-writable sgid files
  wwsgid=$(find $allsgid -perm -2002 -type f -exec ls -la {} \; 2>/dev/null)
  if [ "$wwsgid" ]; then
    echo -e "\e[00;33m[+] World-writable SGID files:\e[00m\n$wwsgid"
    echo -e "\n"
  fi

  #lists world-writable sgid files owned by root
  wwsgidrt=$(find $allsgid -uid 0 -perm -2002 -type f -exec ls -la {} \; 2>/dev/null)
  if [ "$wwsgidrt" ]; then
    echo -e "\e[00;33m[+] World-writable SGID files owned by root:\e[00m\n$wwsgidrt"
    echo -e "\n"
  fi

  #list all files with POSIX capabilities set along with there capabilities
  fileswithcaps=$(getcap -r / 2>/dev/null || /sbin/getcap -r / 2>/dev/null)
  if [ "$fileswithcaps" ]; then
    echo -e "\e[00;31m[+] Files with POSIX capabilities set:\e[00m\n$fileswithcaps"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$fileswithcaps" ]; then
    mkdir $format/files_with_capabilities/ 2>/dev/null
    for i in $fileswithcaps; do cp $i $format/files_with_capabilities/; done 2>/dev/null
  fi

  #searches /etc/security/capability.conf for users associated capapilies
  userswithcaps=$(grep -v '^#\|none\|^$' /etc/security/capability.conf 2>/dev/null)
  if [ "$userswithcaps" ]; then
    echo -e "\e[00;33m[+] Users with specific POSIX capabilities:\e[00m\n$userswithcaps"
    echo -e "\n"
  fi

  if [ "$userswithcaps" ]; then
    #matches the capabilities found associated with users with the current user
    matchedcaps=$(echo -e "$userswithcaps" | grep $(whoami) | awk '{print $1}' 2>/dev/null)
    if [ "$matchedcaps" ]; then
      echo -e "\e[00;33m[+] Capabilities associated with the current user:\e[00m\n$matchedcaps"
      echo -e "\n"
      #matches the files with capapbilities with capabilities associated with the current user
      matchedfiles=$(echo -e "$matchedcaps" | while read -r cap; do echo -e "$fileswithcaps" | grep "$cap"; done 2>/dev/null)
      if [ "$matchedfiles" ]; then
        echo -e "\e[00;33m[+] Files with the same capabilities associated with the current user (You may want to try abusing those capabilties):\e[00m\n$matchedfiles"
        echo -e "\n"
        #lists the permissions of the files having the same capabilies associated with the current user
        matchedfilesperms=$(echo -e "$matchedfiles" | awk '{print $1}' | while read -r f; do ls -la $f; done 2>/dev/null)
        echo -e "\e[00;33m[+] Permissions of files with the same capabilities associated with the current user:\e[00m\n$matchedfilesperms"
        echo -e "\n"
        if [ "$matchedfilesperms" ]; then
          #checks if any of the files with same capabilities associated with the current user is writable
          writablematchedfiles=$(echo -e "$matchedfiles" | awk '{print $1}' | while read -r f; do find $f -writable -exec ls -la {} +; done 2>/dev/null)
          if [ "$writablematchedfiles" ]; then
            echo -e "\e[00;33m[+] User/Group writable files with the same capabilities associated with the current user:\e[00m\n$writablematchedfiles"
            echo -e "\n"
          fi
        fi
      fi
    fi
  fi

  #look for private keys - thanks djhohnstein
  if [ "$thorough" = "1" ]; then
    privatekeyfiles=$(grep -rl "PRIVATE KEY-----" /home 2>/dev/null)
    if [ "$privatekeyfiles" ]; then
      echo -e "\e[00;33m[+] Private SSH keys found!:\e[00m\n$privatekeyfiles"
      echo -e "\n"
    fi
  fi

  #look for AWS keys - thanks djhohnstein
  if [ "$thorough" = "1" ]; then
    awskeyfiles=$(grep -rli "aws_secret_access_key" /home 2>/dev/null)
    if [ "$awskeyfiles" ]; then
      echo -e "\e[00;33m[+] AWS secret keys found!:\e[00m\n$awskeyfiles"
      echo -e "\n"
    fi
  fi

  #look for git credential files - thanks djhohnstein
  if [ "$thorough" = "1" ]; then
    gitcredfiles=$(find / -name ".git-credentials" 2>/dev/null)
    if [ "$gitcredfiles" ]; then
      echo -e "\e[00;33m[+] Git credentials saved on the machine!:\e[00m\n$gitcredfiles"
      echo -e "\n"
    fi
  fi

  #list all world-writable files excluding /proc and /sys
  if [ "$thorough" = "1" ]; then
    wwfiles=$(find / ! -path "*/proc/*" ! -path "/sys/*" -perm -2 -type f -exec ls -la {} \; 2>/dev/null)
    if [ "$wwfiles" ]; then
      echo -e "\e[00;31m[-] World-writable files (excluding /proc and /sys):\e[00m\n$wwfiles"
      echo -e "\n"
    fi
  fi

  if [ "$thorough" = "1" ]; then
    if [ "$export" ] && [ "$wwfiles" ]; then
      mkdir $format/ww-files/ 2>/dev/null
      for i in $wwfiles; do cp --parents $i $format/ww-files/; done 2>/dev/null
    fi
  fi

  #are any .plan files accessible in /home (could contain useful information)
  usrplan=$(find /home -iname *.plan -exec ls -la {} \; -exec cat {} \; 2>/dev/null)
  if [ "$usrplan" ]; then
    echo -e "\e[00;31m[-] Plan file permissions and contents:\e[00m\n$usrplan"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$usrplan" ]; then
    mkdir $format/plan_files/ 2>/dev/null
    for i in $usrplan; do cp --parents $i $format/plan_files/; done 2>/dev/null
  fi

  bsdusrplan=$(find /usr/home -iname *.plan -exec ls -la {} \; -exec cat {} \; 2>/dev/null)
  if [ "$bsdusrplan" ]; then
    echo -e "\e[00;31m[-] Plan file permissions and contents:\e[00m\n$bsdusrplan"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$bsdusrplan" ]; then
    mkdir $format/plan_files/ 2>/dev/null
    for i in $bsdusrplan; do cp --parents $i $format/plan_files/; done 2>/dev/null
  fi

  #are there any .rhosts files accessible - these may allow us to login as another user etc.
  rhostsusr=$(find /home -iname *.rhosts -exec ls -la {} \; -exec cat {} \; 2>/dev/null 2>/dev/null)
  if [ "$rhostsusr" ]; then
    echo -e "\e[00;33m[+] rhost config file(s) and file contents:\e[00m\n$rhostsusr"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$rhostsusr" ]; then
    mkdir $format/rhosts/ 2>/dev/null
    for i in $rhostsusr; do cp --parents $i $format/rhosts/; done 2>/dev/null
  fi

  bsdrhostsusr=$(find /usr/home -iname *.rhosts -exec ls -la {} \; -exec cat {} \; 2>/dev/null 2>/dev/null)
  if [ "$bsdrhostsusr" ]; then
    echo -e "\e[00;33m[+] rhost config file(s) and file contents:\e[00m\n$bsdrhostsusr"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$bsdrhostsusr" ]; then
    mkdir $format/rhosts 2>/dev/null
    for i in $bsdrhostsusr; do cp --parents $i $format/rhosts/; done 2>/dev/null
  fi

  rhostssys=$(find /etc -iname hosts.equiv -exec ls -la {} \; -exec cat {} \; 2>/dev/null 2>/dev/null)
  if [ "$rhostssys" ]; then
    echo -e "\e[00;33m[+] Hosts.equiv file and contents: \e[00m\n$rhostssys"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$rhostssys" ]; then
    mkdir $format/rhosts/ 2>/dev/null
    for i in $rhostssys; do cp --parents $i $format/rhosts/; done 2>/dev/null
  fi

  #list nfs shares/permisisons etc.
  nfsexports=$(
    ls -la /etc/exports 2>/dev/null
    cat /etc/exports 2>/dev/null
  )
  if [ "$nfsexports" ]; then
    echo -e "\e[00;31m[-] NFS config details: \e[00m\n$nfsexports"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$nfsexports" ]; then
    mkdir $format/etc-export/ 2>/dev/null
    cp /etc/exports $format/etc-export/exports 2>/dev/null
  fi

  if [ "$thorough" = "1" ]; then
    #phackt
    #displaying /etc/fstab
    fstab=$(cat /etc/fstab 2>/dev/null)
    if [ "$fstab" ]; then
      echo -e "\e[00;31m[-] NFS displaying partitions and filesystems - you need to check if exotic filesystems\e[00m"
      echo -e "$fstab"
      echo -e "\n"
    fi
  fi

  #looking for credentials in /etc/fstab
  fstab=$(
    grep username /etc/fstab 2>/dev/null | awk '{sub(/.*\username=/,"");sub(/\,.*/,"")}1' 2>/dev/null | xargs -r echo username: 2>/dev/null
    grep password /etc/fstab 2>/dev/null | awk '{sub(/.*\password=/,"");sub(/\,.*/,"")}1' 2>/dev/null | xargs -r echo password: 2>/dev/null
    grep domain /etc/fstab 2>/dev/null | awk '{sub(/.*\domain=/,"");sub(/\,.*/,"")}1' 2>/dev/null | xargs -r echo domain: 2>/dev/null
  )
  if [ "$fstab" ]; then
    echo -e "\e[00;33m[+] Looks like there are credentials in /etc/fstab!\e[00m\n$fstab"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$fstab" ]; then
    mkdir $format/etc-exports/ 2>/dev/null
    cp /etc/fstab $format/etc-exports/fstab done 2>/dev/null
  fi

  fstabcred=$(grep cred /etc/fstab 2>/dev/null | awk '{sub(/.*\credentials=/,"");sub(/\,.*/,"")}1' 2>/dev/null | xargs -I{} sh -c 'ls -la {}; cat {}' 2>/dev/null)
  if [ "$fstabcred" ]; then
    echo -e "\e[00;33m[+] /etc/fstab contains a credentials file!\e[00m\n$fstabcred"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$fstabcred" ]; then
    mkdir $format/etc-exports/ 2>/dev/null
    cp /etc/fstab $format/etc-exports/fstab done 2>/dev/null
  fi

  #use supplied keyword and cat *.conf files for potential matches - output will show line number within relevant file path where a match has been located
  if [ "$keyword" = "" ]; then
    echo -e "[-] Can't search *.conf files as no keyword was entered\n"
  else
    confkey=$(find / -maxdepth 4 -name *.conf -type f -exec grep -Hn $keyword {} \; 2>/dev/null)
    if [ "$confkey" ]; then
      echo -e "\e[00;31m[-] Find keyword ($keyword) in .conf files (recursive 4 levels - output format filepath:identified line number where keyword appears):\e[00m\n$confkey"
      echo -e "\n"
    else
      echo -e "\e[00;31m[-] Find keyword ($keyword) in .conf files (recursive 4 levels):\e[00m"
      echo -e "'$keyword' not found in any .conf files"
      echo -e "\n"
    fi
  fi

  if [ "$keyword" = "" ]; then
    :
  else
    if [ "$export" ] && [ "$confkey" ]; then
      confkeyfile=$(find / -maxdepth 4 -name *.conf -type f -exec grep -lHn $keyword {} \; 2>/dev/null)
      mkdir --parents $format/keyword_file_matches/config_files/ 2>/dev/null
      for i in $confkeyfile; do cp --parents $i $format/keyword_file_matches/config_files/; done 2>/dev/null
    fi
  fi

  #use supplied keyword and cat *.php files for potential matches - output will show line number within relevant file path where a match has been located
  if [ "$keyword" = "" ]; then
    echo -e "[-] Can't search *.php files as no keyword was entered\n"
  else
    phpkey=$(find / -maxdepth 10 -name *.php -type f -exec grep -Hn $keyword {} \; 2>/dev/null)
    if [ "$phpkey" ]; then
      echo -e "\e[00;31m[-] Find keyword ($keyword) in .php files (recursive 10 levels - output format filepath:identified line number where keyword appears):\e[00m\n$phpkey"
      echo -e "\n"
    else
      echo -e "\e[00;31m[-] Find keyword ($keyword) in .php files (recursive 10 levels):\e[00m"
      echo -e "'$keyword' not found in any .php files"
      echo -e "\n"
    fi
  fi

  if [ "$keyword" = "" ]; then
    :
  else
    if [ "$export" ] && [ "$phpkey" ]; then
      phpkeyfile=$(find / -maxdepth 10 -name *.php -type f -exec grep -lHn $keyword {} \; 2>/dev/null)
      mkdir --parents $format/keyword_file_matches/php_files/ 2>/dev/null
      for i in $phpkeyfile; do cp --parents $i $format/keyword_file_matches/php_files/; done 2>/dev/null
    fi
  fi

  #use supplied keyword and cat *.log files for potential matches - output will show line number within relevant file path where a match has been located
  if [ "$keyword" = "" ]; then
    echo -e "[-] Can't search *.log files as no keyword was entered\n"
  else
    logkey=$(find / -maxdepth 4 -name *.log -type f -exec grep -Hn $keyword {} \; 2>/dev/null)
    if [ "$logkey" ]; then
      echo -e "\e[00;31m[-] Find keyword ($keyword) in .log files (recursive 4 levels - output format filepath:identified line number where keyword appears):\e[00m\n$logkey"
      echo -e "\n"
    else
      echo -e "\e[00;31m[-] Find keyword ($keyword) in .log files (recursive 4 levels):\e[00m"
      echo -e "'$keyword' not found in any .log files"
      echo -e "\n"
    fi
  fi

  if [ "$keyword" = "" ]; then
    :
  else
    if [ "$export" ] && [ "$logkey" ]; then
      logkeyfile=$(find / -maxdepth 4 -name *.log -type f -exec grep -lHn $keyword {} \; 2>/dev/null)
      mkdir --parents $format/keyword_file_matches/log_files/ 2>/dev/null
      for i in $logkeyfile; do cp --parents $i $format/keyword_file_matches/log_files/; done 2>/dev/null
    fi
  fi

  #use supplied keyword and cat *.ini files for potential matches - output will show line number within relevant file path where a match has been located
  if [ "$keyword" = "" ]; then
    echo -e "[-] Can't search *.ini files as no keyword was entered\n"
  else
    inikey=$(find / -maxdepth 4 -name *.ini -type f -exec grep -Hn $keyword {} \; 2>/dev/null)
    if [ "$inikey" ]; then
      echo -e "\e[00;31m[-] Find keyword ($keyword) in .ini files (recursive 4 levels - output format filepath:identified line number where keyword appears):\e[00m\n$inikey"
      echo -e "\n"
    else
      echo -e "\e[00;31m[-] Find keyword ($keyword) in .ini files (recursive 4 levels):\e[00m"
      echo -e "'$keyword' not found in any .ini files"
      echo -e "\n"
    fi
  fi

  if [ "$keyword" = "" ]; then
    :
  else
    if [ "$export" ] && [ "$inikey" ]; then
      inikey=$(find / -maxdepth 4 -name *.ini -type f -exec grep -lHn $keyword {} \; 2>/dev/null)
      mkdir --parents $format/keyword_file_matches/ini_files/ 2>/dev/null
      for i in $inikey; do cp --parents $i $format/keyword_file_matches/ini_files/; done 2>/dev/null
    fi
  fi

  #quick extract of .conf files from /etc - only 1 level
  allconf=$(find /etc/ -maxdepth 1 -name *.conf -type f -exec ls -la {} \; 2>/dev/null)
  if [ "$allconf" ]; then
    echo -e "\e[00;31m[-] All *.conf files in /etc (recursive 1 level):\e[00m\n$allconf"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$allconf" ]; then
    mkdir $format/conf-files/ 2>/dev/null
    for i in $allconf; do cp --parents $i $format/conf-files/; done 2>/dev/null
  fi

  #extract any user history files that are accessible
  usrhist=$(ls -la ~/.*_history 2>/dev/null)
  if [ "$usrhist" ]; then
    echo -e "\e[00;31m[-] Current user's history files:\e[00m\n$usrhist"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$usrhist" ]; then
    mkdir $format/history_files/ 2>/dev/null
    for i in $usrhist; do cp --parents $i $format/history_files/; done 2>/dev/null
  fi

  #can we read roots *_history files - could be passwords stored etc.
  roothist=$(ls -la /root/.*_history 2>/dev/null)
  if [ "$roothist" ]; then
    echo -e "\e[00;33m[+] Root's history files are accessible!\e[00m\n$roothist"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$roothist" ]; then
    mkdir $format/history_files/ 2>/dev/null
    cp $roothist $format/history_files/ 2>/dev/null
  fi

  #all accessible .bash_history, fish_history[.*], .zsh_history, .zhistory, .tcsh_history, .csh_history, .nano_history and .python_history files in /home
  checkbashhist=$(find /home -regex '.*\.?\(bash_\|fish_\|zsh_\|z\|tcsh_\|csh_\|nano_\|python_\)history\(\..*\)?' -print -exec cat {} \; 2>/dev/null)
  if [ "$checkbashhist" ]; then
    echo -e "\e[00;31m[-] Location and contents (if accessible) of .bash_history, fish_history, .zsh_history, .zhistory, .tcsh_history, .csh_history, .nano_history and .python_history files:\e[00m\n$checkbashhist"
    echo -e "\n"
  fi

  #any .bak files that may be of interest
  echo -e "\e[00;31m[-] Location and Permissions (if accessible) of .bak file(s):\e[00m"
  find / -name *.bak -type f -exec ls -la {} \; 2>/dev/null
  echo -e "\n"

  #is there any mail accessible
  readmail=$(ls -la /var/mail 2>/dev/null)
  if [ "$readmail" ]; then
    echo -e "\e[00;31m[-] Any interesting mail in /var/mail:\e[00m\n$readmail"
    echo -e "\n"
  fi

  #can we read roots mail
  readmailroot=$(head /var/mail/root 2>/dev/null)
  if [ "$readmailroot" ]; then
    echo -e "\e[00;33m[+] We can read /var/mail/root! (snippet below)\e[00m\n$readmailroot"
    echo -e "\n"
  fi

  if [ "$export" ] && [ "$readmailroot" ]; then
    mkdir $format/mail-from-root/ 2>/dev/null
    cp $readmailroot $format/mail-from-root/ 2>/dev/null
  fi
}
